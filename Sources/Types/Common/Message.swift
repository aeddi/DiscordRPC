import Foundation

/// Represents a message sent in a channel within Discord.
/// - SeeAlso: [Discord Reference](https://discord.com/developers/docs/resources/channel#message-object-message-structure)
public class Message: Codable {
    /// ID of the message
    public let id: String
    /// ID of the channel the message was sent in
    public let channelID: String
    /// ID of the guild the message was sent in
    public let guildID: String?
    /// The author of this message (not guaranteed to be a valid user, see below)
    public let author: User
    /// Member properties for this message's author
    public let member: GuildMember
    /// Contents of the message
    public let content: String
    /// When this message was sent
    public let timestamp: Date
    /// When this message was edited (or null if never)
    public let editedTimestamp: Date?
    /// Whether this was a TTS message
    public let tts: Bool
    /// Whether this message mentions everyone
    public let mentionEveryone: Bool
    /// Users specifically mentioned in the message
    public let mentions: [User]
    /// Roles specifically mentioned in this message
    public let mentionRoles: [String]
    /// Channels specifically mentioned in this message
    public let mentionChannels: [ChannelMention]
    /// Any attached files
    public let attachments: [Attachment]
    /// Any embedded content
    public let embeds: [Embed]
    /// Reactions to the message
    public let reactions: [Reaction]?
    /// Used for validating a message was sent
    public let nonce: String?
    /// Whether this message is pinned
    public let pinned: Bool
    /// If the message is generated by a webhook, this is the webhook's ID
    public let webhookID: String?
    /// [Type of message](https://discord.com/developers/docs/resources/channel#message-object-message-types)
    public let type: MessageType
    /// Sent with Rich Presence-related chat embeds
    public let activity: MessageActivity?
    /// Sent with Rich Presence-related chat embeds
    public let application: Application?
    /// If the message is a response to an [Interaction](https://discord.com/developers/docs/interactions/slash-commands), this is the ID of the interaction's application
    public let applicationID: String?
    /// Data showing the source of a crosspost, channel follow add, pin, or reply message
    public let messageReference: MessageReference?
    /// [Message flags](https://discord.com/developers/docs/resources/channel#message-object-message-flags) combined as a [bitfield](https://en.wikipedia.org/wiki/Bit_field)
    public let flags: Int?
    /// The message associated with the message_reference
    public let referencedMessage: Message?
    /// Sent if the message is a response to an [Interaction](https://discord.com/developers/docs/interactions/slash-commands)
    public let interaction: MessageInteraction?
    /// The thread that was started from this message, includes [thread member](https://discord.com/developers/docs/resources/channel#thread-member-object) object
    public let thread: Channel?
    /// Sent if the message contains components like buttons, action rows, or other interactive components
    public let components: [Component]?
    /// Sent if the message contains stickers
    public let stickerItems: [MessageStickerItem]?
    /// **Deprecated** the stickers sent with the message
    public let stickers: [MessageSticker]?

    private enum CodingKeys: String, CodingKey {
        case id
        case channelID         = "channel_id"
        case guildID           = "guild_id"
        case author
        case member
        case content
        case timestamp
        case editedTimestamp   = "edited_timestamp"
        case tts
        case mentionEveryone   = "mention_everyone"
        case mentions
        case mentionRoles      = "mention_roles"
        case mentionChannels   = "mention_channels"
        case attachments
        case embeds
        case reactions
        case nonce
        case pinned
        case webhookID         = "webhook_id"
        case type
        case activity
        case application
        case applicationID     = "application_id"
        case messageReference  = "message_reference"
        case flags
        case referencedMessage = "referenced_message"
        case interaction
        case thread
        case components
        case stickerItems      = "sticker_items"
        case stickers
    }

    /// - SeeAlso: [Discord Reference](https://discord.com/developers/docs/resources/channel#reaction-object-reaction-structure)
    public class Reaction: Codable {
        /// Times this emoji has been used to react
        public let count: Int
        /// Whether the current user reacted using this emoji
        public let me: Bool
        /// Emoji information
        public let emoji: Emoji
    }

    /// - SeeAlso: [Discord Reference](https://discord.com/developers/docs/resources/channel#message-object-message-activity-structure)
    public class MessageActivity: Codable {
        /// [Type of message activity](https://discord.com/developers/docs/resources/channel#message-object-message-activity-types)
        public let type: MessageActivityType
        /// partyID from a [Rich Presence event](https://discord.com/developers/docs/rich-presence/how-to#updating-presence-update-presence-payload-fields)
        public let partyID: String?

        // swiftlint:disable:next nesting
        private enum CodingKeys: String, CodingKey {
            case type
            case partyID = "party_id"
        }
    }

    /// - SeeAlso: [Discord Reference](https://discord.com/developers/docs/resources/channel#message-reference-object-message-reference-structure)
    public class MessageReference: Codable {
        /// ID of the originating message
        public let messageID: String?
        /// ID of the originating message's channel
        public let channelID: String?
        /// ID of the originating message's guild
        public let guildID: String?
        /// When sending, whether to error if the referenced message doesn't exist instead of sending as a normal (non-reply) message, default true
        public let failIfNotExists: Bool?

        // swiftlint:disable:next nesting
        private enum CodingKeys: String, CodingKey {
            case messageID       = "message_id"
            case channelID       = "channel_id"
            case guildID         = "guild_id"
            case failIfNotExists = "fail_if_not_exists"
        }
    }

    /// - SeeAlso: [Discord Reference](https://discord.com/developers/docs/interactions/slash-commands#message-interaction-object-message-interaction-structure)
    public class MessageInteraction: Codable {
      /// ID of the interaction
        public let id: String
        /// The type of interaction
        //  Documentation does not describe what an InteractionType is
        //  public let type: InteractionType ??
        /// The name of the [application command](https://discord.com/developers/docs/interactions/slash-commands#application-command-object-application-command-structure)
        public let name: String
        /// The user who invoked the interaction
        public let user: User
    }

    /// - SeeAlso: [Discord Reference](https://discord.com/developers/docs/resources/channel#message-object-message-sticker-item-structure)
    public class MessageStickerItem: Codable {
        /// ID of the sticker
        public let id: String
        /// Name of the sticker
        public let name: String
        /// [Type of sticker format](https://discord.com/developers/docs/resources/channel#message-object-message-sticker-format-types)
        public let formatType: MessageStickerFormatType

        // swiftlint:disable:next nesting
        private enum CodingKeys: String, CodingKey {
            case id
            case name
            case formatType = "format_type"
        }
    }

    /// - SeeAlso: [Discord Reference](https://discord.com/developers/docs/resources/channel#message-object-message-sticker-structure)
    public class MessageSticker: Codable {
        /// ID of the sticker
        public let id: String
        /// ID of the pack the sticker is from
        public let packID: String?
        /// Name of the sticker
        public let name: String
        /// Description of the sticker
        public let description: String
        /// For guild stickers, a unicode emoji representing the sticker's expression. for nitro stickers, a comma-separated list of related expressions.
        public let tags: String
        /// **Deprecated** previously the sticker asset hash, now an empty string
        public let asset: String
        /// [Type of sticker format](https://discord.com/developers/docs/resources/channel#message-object-message-sticker-format-types)
        public let formatType: MessageStickerFormatType
        /// Whether or not the sticker is available
        public let available: Bool?
        /// ID of the guild that owns this sticker
        public let guildID: String?
        /// The user that uploaded the sticker
        public let user: User?
        /// A sticker's sort order within a pack
        public let sortValue: Int?

        // swiftlint:disable:next nesting
        private enum CodingKeys: String, CodingKey {
            case id
            case packID     = "pack_id"
            case name
            case description
            case tags
            case asset
            case formatType = "format_type"
            case available
            case guildID    = "guild_id"
            case user
            case sortValue  = "sort_value"
        }
    }
}
